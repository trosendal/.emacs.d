* Configuration
** Personal Information

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Thomas Rosendal"
      user-mail-address "thomas.rosendal@gmail.com")
#+END_SRC
** Mode line

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
;  (load-theme 'dichromacy)
#+END_SRC
** Delete trailing space

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** Magit

#+BEGIN_SRC emacs-lisp
(use-package magit
  :defer t
  :ensure t
  :bind ("C-x g" . magit-status))
#+END_SRC

** R settings

#+BEGIN_SRC emacs-lisp
  (use-package ess
    :defer t
    :ensure t
    :bind ("C-c r" . R))
  (autoload 'R-mode "ess-site.el" "" t)
  (add-to-list 'auto-mode-alist '("\\.R\\'" . R-mode))
  (setq inferior-R-args "--no-restore-history --no-save ")
  (setq ess-history-file nil)
  (use-package poly-R
    :ensure t)

  ;; Use the previous behavior (i.e. underscore inserting '<-')
  (use-package ess-r-mode
    :bind
    (:map ess-r-mode-map
          ("_" . ess-insert-assign))
    (:map inferior-ess-r-mode-map
          ("_" . ess-insert-assign)))

  ;; Use autocomplete in an R script
  (use-package auto-complete
    :defer t
    :ensure t)
  (ac-config-default)
  (setq ess-tab-complete-in-script t)
  ;; When starting R, don't look for the 'project' just the directory
  ;; I'm standing in of the dir of the file that is in the current
  ;; buffer.
  (defun my-ess-startup-directory-function ()
    "Force ESS to use `default-directory' as its startup directory."
    default-directory)
  (setq ess-startup-directory-function 'my-ess-startup-directory-function)

#+END_SRC

** Recent files

https://www.masteringemacs.org/article/find-files-faster-recent-files-package

#+BEGIN_SRC emacs-lisp
  (require 'recentf)
  (recentf-mode 1)
  (setq recentf-max-menu-items 50)
  (global-set-key "\C-x\ \C-r" 'recentf-open-files)

  (global-set-key (kbd "C-x C-a") 'ido-recentf-open)

  (defun ido-recentf-open ()
    "Use `ido-completing-read' to \\[find-file] a recent file"
    (interactive)
    (if (find-file (ido-completing-read "Find recent file: " recentf-list))
        (message "Opening file...")
      (message "Aborting")))
#+END_SRC

Use C-s or C-. to move to the next file.

** Backups
#+BEGIN_SRC emacs-lisp
  (if (file-exists-p "~/.emacs.d/backups")
      nil
    (make-directory "~/.emacs.d/backups"))
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq backup-by-copying t)
  (setq delete-old-versions t)
  (setq delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)
#+END_SRC

*** Move files to trash on delete
#+BEGIN_SRC emacs-lisp
  (setq delete-by-moving-to-trash t)
#+END_SRC

*** Don't backup stuff in the /dev/shm directory.
This is where pass writes temp files and results in bugs where these
files are backedup by emacs with plain text passwords.

#+BEGIN_SRC emacs-lisp
  (defvar backup-inhibit-file-name-regexp "/dev/shm"
    "Files whose full path matches this regular expression will not be backed up.")
  (defun regexp-backup-enable-predicate (filename)
    "Disable backups for files whose name matches `backup-inhibit-file-name-regexp'.
  Also call `normal-backup-enable-predicate'."
    (save-match-data
      (and (not (string-match backup-inhibit-file-name-regexp filename))
           (normal-backup-enable-predicate filename))))
  (setq backup-enable-predicate 'regexp-backup-enable-predicate)
#+END_SRC

** Column number
#+BEGIN_SRC emacs-lisp
;; Show column-number
(column-number-mode 1)
#+END_SRC
** Org mode
#+BEGIN_SRC emacs-lisp
  (use-package org
    :defer t
    :ensure t)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((R . t)))

  (add-hook 'org-mode-hook 'auto-fill-mode)
  ;; (add-hook 'org-mode-hook 'fly-spell-mode)
#+END_SRC

*** Default directories

#+BEGIN_SRC emacs-lisp
(setq org-directory (expand-file-name "~/org/"))
(setq org-default-notes-file (concat org-directory "/notes.org"))
#+END_SRC

*** Setup ORG capture templates
#+BEGIN_SRC emacs-lisp
    (setq org-capture-templates
          '(("t" "Todo" entry (file "~/org/notes.org")
             "\n* TODO %?\n   - State \"TODO\"       from          %T\n":clock-in :clock-resume)))
#+END_SRC
*** Key Bindings

#+BEGIN_SRC emacs-lisp
(bind-key "C-c l" 'org-store-link)
(bind-key "C-c c" 'org-capture)
(bind-key "C-c a" 'org-agenda)
(bind-key "C-c b" 'org-iswitchb)
#+END_SRC

*** Refile
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (list "~/org/")
        org-refile-targets '((org-agenda-files :maxlevel . 1))
        )
#+END_SRC
** Fullscreen
#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(initial-frame-alist (quote ((fullscreen . maximized)))))
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(set-window-fringes nil 0 0)
#+END_SRC
** Windows resize
#+BEGIN_SRC emacs-lisp
;; http://emacswiki.org/emacs/WindowResize
(bind-key "S-C-<left>" 'shrink-window-horizontally)
(bind-key "S-C-<right>" 'enlarge-window-horizontally)
(bind-key "S-C-<up>" 'shrink-window)
(bind-key "S-C-<down>" 'enlarge-window)
#+END_SRC

** Key Bindings
#+BEGIN_SRC emacs-lisp
(bind-key "C-c s" 'shell)
(bind-key "C-c e" 'eshell)
(bind-key "C-c m" 'compile)
(bind-key (kbd "<M-dead-circumflex>") 'delete-indentation)
#+END_SRC

** C code
#+BEGIN_SRC emacs-lisp
(setq c-default-style "k&r"
      c-basic-offset 4)
(setq-default indent-tabs-mode nil)

(add-hook 'c-mode-common-hook
          (lambda()
            (local-set-key  (kbd "C-c o") 'ff-find-other-file)))
 #+END_SRC

** Password manager
Interface to [[https://www.passwordstore.org/][pass]].

#+BEGIN_SRC emacs-lisp
(use-package helm-pass
  :ensure t
  :commands (helm-pass))
#+END_SRC

** Swiper
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t)

  (use-package swiper
    :ensure t
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-find-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))
#+END_SRC
** Multicursor
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :ensure t)
#+END_SRC
** LaTeX/Markdown
#+BEGIN_SRC emacs-lisp
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(add-hook 'LaTeX-mode-hook 'visual-line-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-buffer)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(add-hook 'LaTeX-mode-hook 'auto-fill-mode)
(setq LaTeX-item-indent 0)
(setq LaTeX-indent-level 2)
(setq TeX-brace-indent-level 2)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq TeX-parse-self t) ; Enable parse on load.
(setq TeX-auto-save t) ; Enable parse on save.
(use-package markdown-mode
  :ensure t)
(add-hook 'markdown-mode-hook 'flyspell-mode)
(add-hook 'markdown-mode-hook 'flyspell-buffer)
(add-hook 'markdown-mode-hook 'auto-fill-mode)
(use-package poly-markdown
  :ensure t)
#+END_SRC
** Boomarks
#+BEGIN_SRC emacs-lisp
(bind-key "<XF86WakeUp>" 'bookmark-jump)
#+END_SRC
** Alarm
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC
** Starting place
#+BEGIN_SRC emacs-lisp
(split-window-right)
(dired "~/projects/")
(dired-hide-details-mode)
(text-scale-set -1)
(other-window 1)
(find-file "~/org/todo.org")
#+END_SRC
** Dictionaries
#+BEGIN_SRC emacs-lisp
(setq ispell-dictionary "british")
(defun dict-swedish ()
  "Change dictionary to Swedish"
  (interactive)
  (flyspell-mode-off)
  (ispell-change-dictionary "sv_SE")
  (flyspell-buffer)
  (flyspell-mode)
  )
(defun dict-english ()
  "Change dictionary to English"
  (interactive)
  (flyspell-mode-off)
  (ispell-change-dictionary "en_GB")
  (flyspell-buffer)
  (flyspell-mode-on)
  )
#+END_SRC
** Open files with system from dired mode
#+BEGIN_SRC emacs-lisp
(defun dired-open-file ()
  "In dired, open the file named on this line."
  (interactive)
  (let* ((file (dired-get-filename nil t)))
    (message "Opening %s..." file)
    (call-process "xdg-open" nil 0 nil file)
    (message "Opening %s done" file)))
(global-set-key (kbd "<f4>") 'dired-open-file)
#+END_SRC
* Org-mode configuration
#+STARTUP: indent
#+STARTUP: hidestars
#+TITLE: Emacs Configuration
#+AUTHOR: Thomas Rosendal
#+OPTIONS: toc:4 h:4


* Font size default in new buffers
#+BEGIN_SRC emacs-lisp
 (set-face-attribute 'default nil :height 180)
#+END_SRC
